@model GeneratorBase.MVC.Models.FileDocument
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                 $('#' + hostingEntityName + 'ID').attr("lock","true");
				  $('#' + hostingEntityName + 'ID').trigger("change");
            }
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsHiddenRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsHiddenRule);
    }
}
@using (Html.BeginForm("Create", "FileDocument",new {UrlReferrer = Convert.ToString(ViewData["FileDocumentParentUrl"]), IsDDAdd = ViewBag.IsDDAdd }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
   @Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
	<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
    <div id="errorContainer" style="display: none">
        <div id="errorsMsg"></div>
        <div id="errors"></div>
    </div>
	
	<div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="panel panel-default AppForm">
                <div class="panel-body">
               <div class="row">         
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvDocumentName">
                                <div class='form-group'>
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.DocumentName) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
									
                                    @Html.TextBoxFor(model => model.DocumentName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DocumentName)
									</div>
                                </div>
					</div>
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvDescription">
                                <div class='form-group'>
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.Description) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
									
                                    @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Description)
									</div>
                                </div>
					</div>
				 @if(User.CanAdd("Document"))
                 { 
				   <div class='col-sm-6 col-md-6 col-xs-12' id="dvAttachDocument">
                            <div class='form-group'>
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.AttachDocument) </label>
                                     <div class="input-group col-sm-7 col-md-7 col-xs-12">
									 <div style="position:relative;">
										 <a class='btn btn-primary btnupload' href='javascript:;'>
											 Upload File
										 <input id="AttachDocument"  type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;width:105px;' name="AttachDocument" onchange='$("#upload-file-infoAttachDocument").html($(this).val());'>
										</a>
										&nbsp;
										<span class='label uploadlblFix' id="upload-file-infoAttachDocument"></span>
									</div> 
									</div>
                            </div>
                   </div>
				 }
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvDateCreated">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.DateCreated) <span class="text-danger-reg">*</span></label>
                                <div class="form-group">
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerDateCreated">
                                        @Html.TextBoxFor(model => model.DateCreated, new {@class = "form-control" ,@Value = DateTime.Now.ToString("MM/dd/yyyy hh:ss tt") })
                                        <span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DateCreated)
								</div>
                                </div>
                                <script type="text/javascript">
                                    $(function () {
                                        $('#datetimepickerDateCreated').datetimepicker();
										$('#DateCreated').datetimepicker();
                                    });
                                </script>
                            </div>
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvDateLastUpdated">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.DateLastUpdated) <span class="text-danger-reg">*</span></label>
                                <div class="form-group">
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerDateLastUpdated">
                                        @Html.TextBoxFor(model => model.DateLastUpdated, new {@class = "form-control" ,@Value = DateTime.Now.ToString("MM/dd/yyyy hh:ss tt") })
                                        <span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DateLastUpdated)
								</div>
                                </div>
                                <script type="text/javascript">
                                    $(function () {
                                        $('#datetimepickerDateLastUpdated').datetimepicker();
										$('#DateLastUpdated').datetimepicker();
                                    });
                                </script>
                            </div>
       </div>
                        </div>
                    </div>
                </div>
        </div>
          @Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["FileDocumentParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" })
	<input type="submit" name="command" value="Create" class="btn btn-primary btn-sm" />
    if (ViewBag.IsDDAdd == null && User.CanEdit("FileDocument"))
    {
	<input type="submit" name="command" value="Create & Continue" class="btn btn-primary btn-sm" />
	}
	 <input type="hidden" name="hdncommand" value="" />
	<br/><br/>
}
	<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	<script>
            $("input[type='submit']").click(function () {
                var $this = $(this);
                $('input:hidden[name="hdncommand"]').val($this.val());
            });
	</script>
@{
    var businessrule = User.businessrules.Where(p => p.EntityName == "FileDocument").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        <script>
            $("form").submit(function () {
                var flag = true;
                
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetMandatoryProperties", "FileDocument")",
                    data: $(this).serialize(),
                     success: function (data) {
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        document.getElementById('ErrMsg').innerHTML = "";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0)
                            {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                return flag;
            });
        </script>
    }
    else
    {
           
    }
}


