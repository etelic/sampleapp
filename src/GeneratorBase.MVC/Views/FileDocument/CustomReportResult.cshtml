@model PagedList.IPagedList<GeneratorBase.MVC.Models.FileDocument>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "FileDocument");
	var reportUrl = GeneratorBase.MVC.Controllers.BaseController.FavoriteUrl.ToString();
    var fromview = Request.QueryString["FromViewReport"];
    var rptId = Request.QueryString["rptId"];
}

<div id="FileDocument">
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }

</style>
<script type="text/javascript"> 
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
			PaginationClick(e, 'FileDocument','@User.JavaScriptEncodedName',true @(fromview == null || fromview == "" ? ",false" : "," + fromview) @(rptId==null||rptId==""?",false":","+rptId))
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchFileDocument").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_FileDocument").hide();
	        }
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'FileDocument');
        }
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
  DateCreatedFrom = Request.QueryString["DateCreatedFrom"],
  DateCreatedTo = Request.QueryString["DateCreatedTo"],
  DateLastUpdatedFrom = Request.QueryString["DateLastUpdatedFrom"],
  DateLastUpdatedTo = Request.QueryString["DateLastUpdatedTo"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = ViewBag.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = ViewBag.GroupByColumn,
				 FilterCondition = ViewBag.FilterCondition,
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
  DateCreatedFrom = Request.QueryString["DateCreatedFrom"],
  DateCreatedTo = Request.QueryString["DateCreatedTo"],
  DateLastUpdatedFrom = Request.QueryString["DateLastUpdatedFrom"],
  DateLastUpdatedTo = Request.QueryString["DateLastUpdatedTo"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-body" style="margin:0px; padding:8px;">
	@if (ViewData["HostingEntity"]==null)
		{ 
			if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchFileDocument" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
            </div>
		}
	}
	
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table id="tblReportResult" class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>
				<th class="col0" style="display: none;">
                                        <input type="checkbox" style="visibility: hidden;"/>
                                    </th>
                                    <th class="col1" style="display: none;"></th>
@if(User.CanView("FileDocument","DocumentName") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "DocumentName");
			<th class="col2">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "FileDocument",getSortHtmlAttributes("DocumentName", false, null, false),new {  @onclick = "SortLinkClick(event,'FileDocument',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "DocumentName")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "DocumentName")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("FileDocument","Description") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "Description");
			<th class="col3">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "FileDocument",getSortHtmlAttributes("Description", false, null, false),new {  @onclick = "SortLinkClick(event,'FileDocument',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Description")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Description")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("FileDocument","AttachDocument") && User.CanView("Document"))
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "AttachDocument");
			<th class="col4">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "FileDocument",getSortHtmlAttributes("AttachDocument", false, null, false),new {  @onclick = "SortLinkClick(event,'FileDocument',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "AttachDocument")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "AttachDocument")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("FileDocument","DateCreated") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "DateCreated");
			<th class="col5">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "FileDocument",getSortHtmlAttributes("DateCreated", false, null, false),new {  @onclick = "SortLinkClick(event,'FileDocument',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "DateCreated")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "DateCreated")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("FileDocument","DateLastUpdated") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "DateLastUpdated");
			<th class="col6">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "FileDocument",getSortHtmlAttributes("DateLastUpdated", false, null, false),new {  @onclick = "SortLinkClick(event,'FileDocument',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "DateLastUpdated")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "DateLastUpdated")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
       </tr>
</thead>
@{ bool isFirst = true; var oldKey = string.Empty; }
                                @foreach (var item in Model)
                                {
                                    if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || (string.IsNullOrEmpty(oldKey)))
                                        {
                                            isFirst = false;
											var groupCnt = Model.Where(grp => grp.m_DisplayValue == groupKey).Count();
                                            string groupString = string.Empty;
                                            if (groupCnt > 1)
                                            {
                                                groupString = "(" + groupCnt + " Records)";
                                            }
                                            else
                                            {
                                                groupString = "(" + groupCnt + " Record)";
                                            }
                                            <tr>
                                                <td colspan="7" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                                            </tr>
                                        }
                                    }

		<tr>
	 <td style="display: none;">
                                        <input type="checkbox" style="display:none;" id="@item.Id" />
                                    </td>
                                    <td style="display: none;"></td>
	@if(User.CanView("FileDocument","DocumentName"))
{
		<td >
            @Html.DisplayFor(modelItem => item.DocumentName)
        </td>
}
@if(User.CanView("FileDocument","Description"))
{
		<td >
            @Html.DisplayFor(modelItem => item.Description)
        </td>
}
@if(User.CanView("FileDocument","AttachDocument") && User.CanView("Document"))
{
		<td>
		 @if(!string.IsNullOrEmpty(Html.DisplayFor(modelItem => item.AttachDocument).ToString())){
		 						@Html.ActionLink(item.AttachDocument, "Download", new { filename= item.AttachDocument}) 
			 
							  }else{ <label>NA</label>} 
        </td>
		}
		@if(User.CanView("FileDocument","DateCreated"))
			{
			<td  id=@Html.Raw("'timeDateCreated" + item.Id + "'")>
			</td>
			 @Html.Raw("<script> $(function () {$('timeDateCreated" + item.Id + "').datetimepickerIndex({divid:'timeDateCreated" + item.Id + "',format: 'MM/DD/YYYY hh:mm',val:'" +  @Html.DisplayFor(modelItem => item.DateCreated) + "'})});</script>")        
			}
  		@if(User.CanView("FileDocument","DateLastUpdated"))
			{
			<td  id=@Html.Raw("'timeDateLastUpdated" + item.Id + "'")>
			</td>
			 @Html.Raw("<script> $(function () {$('timeDateLastUpdated" + item.Id + "').datetimepickerIndex({divid:'timeDateLastUpdated" + item.Id + "',format: 'MM/DD/YYYY hh:mm',val:'" +  @Html.DisplayFor(modelItem => item.DateLastUpdated) + "'})});</script>")        
			}
  
             </tr>
                            }
                    </table>
                </div>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "FileDocument", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistFileDocument",
							 @onchange = @Html.Raw("pagesizelistChange(event,'FileDocument','"
							  + @User.JavaScriptEncodedName + "',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview) + (rptId == null || rptId == "" ? ",false" : "," + rptId) + ")"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "FileDocument",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistFileDocument"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div> 
 </div>
</div>

