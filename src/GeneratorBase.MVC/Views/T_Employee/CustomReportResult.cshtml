@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Employee>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Employee");
	var reportUrl = GeneratorBase.MVC.Controllers.BaseController.FavoriteUrl.ToString();
    var fromview = Request.QueryString["FromViewReport"];
    var rptId = Request.QueryString["rptId"];
}

<div id="T_Employee">
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }

</style>
<script type="text/javascript"> 
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
			PaginationClick(e, 'T_Employee','@User.JavaScriptEncodedName',true @(fromview == null || fromview == "" ? ",false" : "," + fromview) @(rptId==null||rptId==""?",false":","+rptId))
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_Employee").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_T_Employee").hide();
	        }
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'T_Employee');
        }
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
  t_employeeorganizationassociation = Request.QueryString["t_employeeorganizationassociation"],
              
 t_associatedemployeetype = Request.QueryString["t_associatedemployeetype"],
 t_associatedemployeestatus = Request.QueryString["t_associatedemployeestatus"],
 t_employeeaddress = Request.QueryString["t_employeeaddress"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = ViewBag.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = ViewBag.GroupByColumn,
				 FilterCondition = ViewBag.FilterCondition,
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_associatedemployeetype = Request.QueryString["t_associatedemployeetype"],
 t_associatedemployeestatus = Request.QueryString["t_associatedemployeestatus"],
 t_employeeaddress = Request.QueryString["t_employeeaddress"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-body" style="margin:0px; padding:8px;">
	@if (ViewData["HostingEntity"]==null)
		{ 
			if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_Employee" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
            </div>
		}
	}
	
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table id="tblReportResult" class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>
				<th class="col0" style="display: none;">
                                        <input type="checkbox" style="visibility: hidden;"/>
                                    </th>
                                    <th class="col1" style="display: none;"></th>
@if(User.CanView("T_Employee","T_Title") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_Title");
			<th class="col2">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_Title", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Title")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Title")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_FirstName") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_FirstName");
			<th class="col3">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_FirstName", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_FirstName")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_FirstName")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_MiddleName") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_MiddleName");
			<th class="col4">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_MiddleName", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_MiddleName")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_MiddleName")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_LastName") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_LastName");
			<th class="col5">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_LastName", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_LastName")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_LastName")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_Email") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_Email");
			<th class="col6">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_Email", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Email")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Email")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_PhoneNo") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_PhoneNo");
			<th class="col7">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_PhoneNo", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_PhoneNo")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_PhoneNo")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_IdentificationNo") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_IdentificationNo");
			<th class="col8">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_IdentificationNo", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_IdentificationNo")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_IdentificationNo")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_Picture") && User.CanView("Document"))
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_Picture");
			<th class="col9">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_Picture", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Picture")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Picture")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Employee","T_AssociatedEmployeeTypeID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AssociatedEmployeeTypeID");
			<th class="col10" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employeetype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedEmployeeType"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_AssociatedEmployeeTypeID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AssociatedEmployeeTypeID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AssociatedEmployeeTypeID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Employee","T_AssociatedEmployeeStatusID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AssociatedEmployeeStatusID");
			<th class="col11" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employeestatus" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedEmployeeStatus"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_AssociatedEmployeeStatusID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AssociatedEmployeeStatusID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AssociatedEmployeeStatusID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Employee","T_EmployeeUserLoginID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EmployeeUserLoginID");
			<th class="col12" @(Convert.ToString(ViewData["HostingEntity"]) == "User" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeUserLogin"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_EmployeeUserLoginID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EmployeeUserLoginID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EmployeeUserLoginID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Employee","T_EmployeeAddressID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EmployeeAddressID");
			<th class="col13" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Address" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeAddress"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee",getSortHtmlAttributes("T_EmployeeAddressID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Employee',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview)+ (rptId==null||rptId==""?",false":","+rptId)+ ");" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EmployeeAddressID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EmployeeAddressID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
       </tr>
</thead>
@{ bool isFirst = true; var oldKey = string.Empty; }
                                @foreach (var item in Model)
                                {
                                    if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || (string.IsNullOrEmpty(oldKey)))
                                        {
                                            isFirst = false;
											var groupCnt = Model.Where(grp => grp.m_DisplayValue == groupKey).Count();
                                            string groupString = string.Empty;
                                            if (groupCnt > 1)
                                            {
                                                groupString = "(" + groupCnt + " Records)";
                                            }
                                            else
                                            {
                                                groupString = "(" + groupCnt + " Record)";
                                            }
                                            <tr>
                                                <td colspan="14" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                                            </tr>
                                        }
                                    }

		<tr>
	 <td style="display: none;">
                                        <input type="checkbox" style="display:none;" id="@item.Id" />
                                    </td>
                                    <td style="display: none;"></td>
	@if(User.CanView("T_Employee","T_Title"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_Title)
        </td>
}
@if(User.CanView("T_Employee","T_FirstName"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_FirstName)
        </td>
}
@if(User.CanView("T_Employee","T_MiddleName"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_MiddleName)
        </td>
}
@if(User.CanView("T_Employee","T_LastName"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_LastName)
        </td>
}
@if(User.CanView("T_Employee","T_Email"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_Email)
        </td>
}
@if(User.CanView("T_Employee","T_PhoneNo"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_PhoneNo)
        </td>
}
@if(User.CanView("T_Employee","T_IdentificationNo"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_IdentificationNo)
        </td>
}
	@if(User.CanView("T_Employee","T_Picture") && User.CanView("Document"))
	{
		<td width="30px">
			@if(!string.IsNullOrEmpty(Html.DisplayFor(modelItem => item.T_Picture).ToString())){
			<ul class="gallery" style="margin: 0px; padding: 0px;">
                <li style="list-style:none; margin:0px; padding:0px;">
                    <a href="@Url.Action("DisplayImageAfterhover", "Document", new { id = item.T_Picture })" rel="prettyPhoto" title="" style="margin: 0px; padding: 0px;"><img src="@Url.Action("DisplayImage", "Document", new { id = item.T_Picture , maxSize=30  })" width="30" height="30" alt="T_Picture" style="margin: 0px; padding: 0px;" /></a>
                </li>
				
            </ul>
			<div class="modal fade" id="image-gallery" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                                                        <div class="modal-dialog">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true" class="fa fa-close"></span><span class="sr-only">Close</span></button>
                                                                    <h4 class="modal-title" id="image-gallery-title">@item.DisplayValue</h4>
                                                                </div>
                                                                <div class="modal-body">
                                                                    <img id="image-gallery-image" class="img-responsive" src="@(Url.Content("~/Files/")+Url.Content(Html.DisplayFor(modelItem => item.T_Picture).ToString()))">
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
			}else{<label>NA</label>}
        </td>
}
@if(User.CanView("T_Employee","T_AssociatedEmployeeTypeID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employeetype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedEmployeeType"?"hidden":"") >
            @Html.DisplayFor(modelItem => item.t_associatedemployeetype.DisplayValue)
			        </td>
}
@if(User.CanView("T_Employee","T_AssociatedEmployeeStatusID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employeestatus" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedEmployeeStatus"?"hidden":"") >
            @Html.DisplayFor(modelItem => item.t_associatedemployeestatus.DisplayValue)
			        </td>
}
@if(User.CanView("T_Employee","T_EmployeeUserLoginID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "User" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeUserLogin"?"hidden":"") >
            @Html.DisplayFor(modelItem => item.t_employeeuserlogin.UserName)
			        </td>
}
@if(User.CanView("T_Employee","T_EmployeeAddressID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Address" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeAddress"?"hidden":"") >
            @Html.DisplayFor(modelItem => item.t_employeeaddress.DisplayValue)
			        </td>
}

             </tr>
                            }
                    </table>
                </div>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Employee", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_Employee",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_Employee','"
							  + @User.JavaScriptEncodedName + "',true" + (fromview == null || fromview == "" ? ",false" : "," + fromview) + (rptId == null || rptId == "" ? ",false" : "," + rptId) + ")"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Employee",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_Employee"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div> 
 </div>
</div>

