@model GeneratorBase.MVC.Models.T_TimeSlots
@using PagedList;
@{
    ViewBag.Title = "Edit Time Slots";
	var EditPermission = User.CanEditItem("T_TimeSlots", Model, User);
	var DeletePermission = User.CanDeleteItem("T_TimeSlots", Model, User);
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_TimeSlots");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Time Slots";
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_SlotNo")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_TimeSlots", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
             if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				 $('#' + hostingEntityName + 'ID').trigger("change");
				  $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
			if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			}
			 
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_TimeSlotsIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_TimeSlotsIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_TimeSlotsIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_TimeSlotsIsGroupsHiddenRule);
    }
}

@{
    if (!string.IsNullOrEmpty(ViewBag.T_TimeSlotsIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_TimeSlotsIsSetValueUIRule);
    }
}
	<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title">
            <i class="glyphicon glyphicon-edit text-primary"></i> @EntityDisplayName  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>

			  <div class="btn-group pull-right" style="margin-top:3px;">
            <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                Action
                <span class="caret">    </span>
            </button>
			<ul class="dropdown-menu pull-left">
				<li>
                    <a href="@Url.Action("Details", "T_TimeSlots", new { id = Model.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
				<li>
                    @if (User.Identity.IsAuthenticated && User != null && User.CanEdit("T_TimeSlots"))
                    {
                        <a href="@Url.Action("Edit","T_TimeSlots", new { id = Model.Id,  UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (User.Identity.IsAuthenticated && User != null && User.CanDelete("T_TimeSlots"))
                    {
                        <a href="@Url.Action("Delete", "T_TimeSlots", new { id = Model.Id, UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu pull-left">
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Session"))
				{
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Session", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_SessionTimeSlotAssociaton", 
							HostingEntityName = "T_TimeSlots",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Session
						</a>
					</li>
				}
							@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_SessionEvents"))
				{
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_SessionEvents", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_SessionEventsTimeSlots", 
							HostingEntityName = "T_TimeSlots",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Session
						</a>
					</li>
				}
			</ul>
</li>
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu pull-left">
	<a tabindex="-1" href="#" style="margin-bottom:10px;">Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "T_Session", new {sourceEntity="T_TimeSlots",id=Model.Id}, null)">Session</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_SessionEvents", new {sourceEntity="T_TimeSlots",id=Model.Id}, null)">Session Events</a>
</li>
</ul>
</li>
			</ul>
		</div>

        </h1>

      <h2 class="text-primary">
	  <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
			<div class="pull-right EntityDisplayBut">
				@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_TimeSlotsParentUrl"] }, new { @onclick = "",  @class="btn btn-default btn-xs pull-right formbuttonfix" })

				
            </div>
	 </h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>

<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
 <div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab">Details</a></li>
        <li>
            <a href="#ScheduleSession" data-toggle="tab">
              Session
            </a>
        </li>
		 <li @(!User.CanView("T_SessionEvents")?"style=display:none;":"")><a onclick="LoadTab('T_SessionEventsTimeSlots','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_SessionEvents", new {RenderPartial=true, HostingEntity ="T_TimeSlots", HostingEntityID = @Model.Id, AssociatedType = "T_SessionEventsTimeSlots",TabToken = DateTime.Now.Ticks,}))')" href="#T_SessionEventsTimeSlots" data-toggle="tab">Session
		 <span class="badge bg-blue"><div id="dvcnt_T_SessionEventsTimeSlots">@ViewBag.T_SessionEventsTimeSlotsCount</div></span>
		 </a></li>

    </ul>
		<div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
@using (Html.BeginForm("Edit","T_TimeSlots",new {UrlReferrer =Convert.ToString(ViewData["T_TimeSlotsParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data",@id="frmT_TimeSlots" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
											<div class="row">
				@if(User.CanView("T_TimeSlots","T_SlotNo"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_SlotNo">
							<div class='form-group' title="">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_SlotNo)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_SlotNo,  getHtmlAttributes("T_SlotNo"))
									@Html.ValidationMessageFor(model => model.T_SlotNo)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_SlotNo, new { @class = "form-control" })}
				@if(User.CanView("T_TimeSlots","T_LearningCenterTimeSlotsAssociationID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_LearningCenterTimeSlotsAssociationID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_LearningCenterTimeSlotsAssociationID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_TimeSlots", "T_LearningCenterTimeSlotsAssociationID"))
		{
			@Html.DropDownList("T_LearningCenterTimeSlotsAssociationID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_LearningCenter", @dataurl = Url.Action("GetAllValue", "T_LearningCenter",new { caller = "T_LearningCenterTimeSlotsAssociationID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_LearningCenterTimeSlotsAssociationID, new { @class = "form-control" })
			@Html.DropDownList("T_LearningCenterTimeSlotsAssociationID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_LearningCenter", @dataurl = Url.Action("GetAllValue", "T_LearningCenter",new { caller = "T_LearningCenterTimeSlotsAssociationID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_LearningCenterTimeSlotsAssociationID)
									@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_LearningCenter"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Learning Center','dvPopup','" + Url.Action("CreateQuick", "T_LearningCenter", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

															</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_LearningCenterTimeSlotsAssociationID, new { @class = "form-control" })}
@if(User.CanView("T_TimeSlots","T_StartTime"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_StartTime">
							  <div class="form-group" title="">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_StartTime) <span class="text-danger-reg">*</span></label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_StartTime">
 @Html.TextBoxFor(model => model.T_StartTime, "{0:HH:mm}", User.CanEdit("T_TimeSlots", "T_StartTime") ? (object)new {@class = "form-control",@format = "hh:mm" } : (object)new { @class = "form-control", @readonly="readonly",@format = "hh:mm"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_StartTime)

								</div>
                                </div>
								@if(User.CanEdit("T_TimeSlots", "T_StartTime"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_StartTime').datetimepicker({ pickDate:false, minuteStepping: 15 });
                                        $('#datetimepickerT_StartTime').datetimepicker({ pickDate:false, minuteStepping: 15 });
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_StartTime, new { @class = "form-control" })}
@if(User.CanView("T_TimeSlots","T_EndTime"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EndTime">
							  <div class="form-group" title="">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EndTime) <span class="text-danger-reg">*</span></label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_EndTime">
 @Html.TextBoxFor(model => model.T_EndTime, "{0:HH:mm}", User.CanEdit("T_TimeSlots", "T_EndTime") ? (object)new {@class = "form-control",@format = "hh:mm" } : (object)new { @class = "form-control", @readonly="readonly",@format = "hh:mm"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_EndTime)

								</div>
                                </div>
								@if(User.CanEdit("T_TimeSlots", "T_EndTime"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_EndTime').datetimepicker({ pickDate:false, minuteStepping: 15 });
                                        $('#datetimepickerT_EndTime').datetimepicker({ pickDate:false, minuteStepping: 15 });
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_EndTime, new { @class = "form-control" })}
       </div>
	            </div>
        </div>
		</div>
		 @Html.AntiForgeryToken();
		 @Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_TimeSlotsParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix" })
		 if (EditPermission)
         {
 				<input type="submit" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix" />
				<input type="submit" name="command" value="Save & Continue" class="btn btn-primary btn-sm pull-left formbuttonfix" />
		}	
				<input type="hidden" name="hdncommand" value="" />
}
<div class="dropdown pull-left formbuttonfix">
<button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown">
            Add Association
            <span class="caret"></span>
        </button>
		 <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1">

			@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Session"))
            {
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Session",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_SessionTimeSlotAssociaton", 
						HostingEntityName = "T_TimeSlots",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Session
                </a>
				</li>
            }

			

			@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_SessionEvents"))
            {
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_SessionEvents",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_SessionEventsTimeSlots", 
						HostingEntityName = "T_TimeSlots",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Session
                </a>
				</li>
            }

			
</ul>

			</div><div class="clearfix" style="clear:both"></div>
</div>
 <div class="tab-pane fade in" id="T_SessionTimeSlotAssociaton">
 	@if (User.Identity.IsAuthenticated && User != null && User.CanView("T_Session"))
	{
	  // Html.RenderAction("Index", "T_Session", new {RenderPartial=true, HostingEntity = "T_TimeSlots", HostingEntityID = @Model.Id, AssociatedType = "T_SessionTimeSlotAssociaton" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_SessionEventsTimeSlots">
 	@if (User.Identity.IsAuthenticated && User != null && User.CanView("T_SessionEvents"))
	{
	  // Html.RenderAction("Index", "T_SessionEvents", new {RenderPartial=true, HostingEntity = "T_TimeSlots", HostingEntityID = @Model.Id, AssociatedType = "T_SessionEventsTimeSlots" }); 
	}
  </div>
       <div class="tab-pane fade in" id="ScheduleSession">
            @Html.Partial("~/Views/T_Schedule/CalendarView.cshtml", Model.t_sessioneventstimeslots.Select(p => p.Id).ToList(), new ViewDataDictionary { { "HostingEntity", "T_TimeSlots" }, { "HostingEntityID", Model.Id } })     
        </div>
		<script>
         $(document).ready(function () {
             $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                 $('#calendar').fullCalendar('render');
             });
             $('#ScheduleSession a:first').tab('show');
         });
     </script>

</div> <!-- /tab-content --><br />

<br/>
</div>
	<script>
	   
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	

@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_TimeSlots").ToList();

if ((businessrule != null && businessrule.Count > 0) )
{
    <script>
		$(document).ready(function () {
				document.getElementById("ErrMsg").innerHTML = "";
				var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";

				 form = $("#frmT_TimeSlots").serialize();
				dataurl = "@Url.Action("businessruletype", "T_TimeSlots", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad(dataurl, "T_TimeSlots", false, "ErrMsg", form);
				//business rules on inline associations

    });
</script>
<script>
    $("form").submit(function () {
			document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
            var dataurl = "";
            var form = "";
            var inlinecount = "0";
 form = $("#frmT_TimeSlots").serialize();
    
				 dataurl = "@Url.Action("businessruletype", "T_TimeSlots", new { ruleType = "OnEdit"})";
                 flag = ApplyBusinessRuleOnSubmit(dataurl, "T_TimeSlots", false, "ErrMsg", form);

  				 //business rules on inline associations
               
			 if (flag)
				{
				                    SaveServerTime(this, true);
                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
                    $("form").find(':input').removeAttr('disabled');
					}
            return flag;
		});
		 $(document).ready(function () {
                $("input[type='submit']").on('blur', function () {
                    $("input[type='submit']").removeAttr('disabled');
                });
               
            });
</script>
}
 else
    {
       <script>
    $("input[type='submit']").click(function (event) {
        var $this = $(this);
		SaveServerTime(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
	</script>
    }
 
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
		focusOnControl('frmT_TimeSlots');
        }
        catch (ex) { }
    });
</script>


