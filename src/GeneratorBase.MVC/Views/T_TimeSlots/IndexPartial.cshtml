@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_TimeSlots>
@using PagedList.Mvc;
@{
	
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_TimeSlots");
}

<div id="T_TimeSlots">
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_TimeSlots')
			PaginationClick(e, 'T_TimeSlots','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_TimeSlots").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_T_TimeSlots").hide();
	        }
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'T_TimeSlots');
        }
	    $("#SearchStringT_TimeSlots").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_TimeSlotsSearch").bind("click", (function () {
                        }));
                $('#T_TimeSlotsSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_TimeSlots").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_TimeSlots').className == 'collapse') {
				 $('#lblT_TimeSlots').css('display', 'none');
            }
        })
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
 t_learningcentertimeslotsassociation = Request.QueryString["t_learningcentertimeslotsassociation"],
  T_SlotNoFrom = Request.QueryString["T_SlotNoFrom"],
  T_SlotNoTo = Request.QueryString["T_SlotNoTo"],
  T_StartTimeFrom = Request.QueryString["T_StartTimeFrom"],
  T_StartTimeTo = Request.QueryString["T_StartTimeTo"],
  T_EndTimeFrom = Request.QueryString["T_EndTimeFrom"],
  T_EndTimeTo = Request.QueryString["T_EndTimeTo"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = ViewBag.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = ViewBag.GroupByColumn,
				 FilterCondition = ViewBag.FilterCondition,
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_learningcentertimeslotsassociation = Request.QueryString["t_learningcentertimeslotsassociation"],
  T_SlotNoFrom = Request.QueryString["T_SlotNoFrom"],
  T_SlotNoTo = Request.QueryString["T_SlotNoTo"],
  T_StartTimeFrom = Request.QueryString["T_StartTimeFrom"],
  T_StartTimeTo = Request.QueryString["T_StartTimeTo"],
  T_EndTimeFrom = Request.QueryString["T_EndTimeFrom"],
  T_EndTimeTo = Request.QueryString["T_EndTimeTo"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-heading clearfix" style="margin:0px; padding:2px;">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_TimeSlots'>
				  @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_TimeSlots"))
				  {
						
					<button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Add" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Time Slots','dvPopup','" + Url.Action("CreateQuick", "T_TimeSlots", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
						<span class="fam-add"></span>
                    </button>
					<button class="btn btn-default tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_TimeSlots", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');")>
						<span class="fam-world-add"></span> Add
					</button>
			}
			@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<button class="btn btn-default tip-top" data-placement="top" data-original-title="Associate Time Slots with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Time Slots','dvPopupBulkOperation','" + Url.Action("Index", "T_TimeSlots", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
					<span class="fam-chart-organisation"></span>
				</button>
			}
                </div>
				<div class="btn-group">

				@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_TimeSlots"))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <button type="button" class="btn btn-default btn-default tip-top" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_TimeSlots") + "');")>
                        <span class="fam-page-excel"></span>               
                 </button>
				}
			}
				 <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_TimeSlots",getSortHtmlAttributes(null, false, null, true), null) + "');")>
				    <span class="fam-page-white-put"></span>
                </div>
		 </div>
		<div class="btn-group">
               @if (ViewData["HostingEntity"] == null)
			   {
                        <button class="btn btn-default tip-top" data-placement="top" data-original-title="Show Graph" style="padding:3px 5px;" data-toggle="modal" data-target="#ShowGraphT_TimeSlots" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_TimeSlots');")>
                            <span class="fam-chart-bar"></span>
                        </button>
				}
             <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideT_TimeSlots" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("showhideColumns(event,'T_TimeSlots');")>
                        <span class="fam-table-row-delete"></span>
                    </button>
	@if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
	{
		<div class="btn-group">
		<a class="btn btn-default btn-default dropdown-toggle tip-top" data-original-title="Filter-Groupby" style="padding:3px 5px;" data-toggle="dropdown" href="#">
		<span class="glyphicon glyphicon-filter"></span>
		</a>
		<ul class="dropdown-menu" role="menu">
            <li>
                <a id="fltT_LearningCenter" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_LearningCenter');EntityFilter('T_TimeSlots','" + Url.Action("GetAllValueForFilter", "T_LearningCenter") + "','" + Html.Raw(Url.Action("Index", "T_TimeSlots", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_LearningCenter", AssociatedType = "T_LearningCenterTimeSlotsAssociation", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Learning Center</span>
                </a>
            </li>
     <li>@Html.ActionLink("Clear", "Index", new { viewtype = Convert.ToString(ViewBag.TemplatesName) }, new { onclick = "ClearFilterCookies();", @class = "label label-primary pull-left filterLabel", @Style = "margin-left:20px;color: white" })</li>
		</ul>
		</div>
	}
                </div>
 <div class="btn-group">
    <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Bulk Actions" style="padding:3px 5px;" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	
	@if (User.Identity.IsAuthenticated && User != null && User.CanEdit("T_TimeSlots")&&  User.CanUseVerb("BulkUpdate","T_TimeSlots",User))
	{
	<li>
		<a data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Time Slots','dvPopup','" + Url.Action("BulkUpdate", "T_TimeSlots", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">Update</a>
	</li>
	
	}
	
 
	 @if (User.Identity.IsAuthenticated && User != null && User.CanDelete("T_TimeSlots") && User.CanUseVerb("BulkDelete","T_TimeSlots",User))
     {
	 <li>
		<a style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_TimeSlots','Bulk Delete','@Url.Action("DeleteBulk", "T_TimeSlots")');">Delete</a>
	 </li>
	
	 }
                        </ul>
                    </div>
					 <div class="btn-group">
                        <a class="btn btn-default dropdown-toggle tip-top" data-original-title="View Grid As" style="padding:3px 5px;" data-toggle="dropdown">
                            <span class="fa fa fa-table"></span>
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px">
                            <li>
                                <a data-placement="top" style="cursor:pointer;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_TimeSlots','" + Url.Action("Index", "T_TimeSlots", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_TimeSlots','" + Url.Action("Index", "T_TimeSlots", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialList" }) + "')")">
                                    <span class="fa fa-list"></span> List
                                </a>
                            </li>
                        </ul>
                    </div>
					

				<div class="pull-right" style="width:250px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_TimeSlots", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_TimeSlotsSearch" onclick="SearchClick(event, 'T_TimeSlots', '@Html.Raw(Url.Action("Index", "T_TimeSlots", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
 @if (ViewData["HostingEntity"]==null)
	{ 
			 <a href="@(Url.Action("SetFSearch", "T_TimeSlots")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-page-find"></span></a>
	}
								<button id="T_TimeSlotsCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_TimeSlots','@Html.Raw(Url.Action("Index", "T_TimeSlots", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="T_TimeSlotsSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_TimeSlots','@Html.Raw(Url.Action("Index", "T_TimeSlots", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="panel-body" style="margin:0px; padding:8px;">
 @if (ViewData["HostingEntity"]==null)
	{ 
	if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_TimeSlots" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
						 <a href="@Url.Action("Index", "T_TimeSlots",new{viewtype = Convert.ToString(ViewBag.TemplatesName)})" style="margin-left:5px;float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
						  <a href="@(Url.Action("SetFSearch", "T_TimeSlots")+Request.Url.Query)" style="float:right" ><span class="glyphicon glyphicon-edit"></span> Modify</a>
            </div>
	}
}
	@Html.Partial("~/Views/T_TimeSlots/ShowHideColumns.cshtml") 
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>

	 <th class="col0" style="width:20px;">
		<input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
        @Html.Hidden("SelectedItems")
	</th>

					<th class="col1" style="width:70px;">Actions</th>
@if(User.CanView("T_TimeSlots","T_SlotNo") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_SlotNo");
			<th class="col2">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_TimeSlots",getSortHtmlAttributes("T_SlotNo", false, null, false),new {  @onclick = "SortLinkClick(event,'T_TimeSlots');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_SlotNo")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_SlotNo")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_TimeSlots","T_LearningCenterTimeSlotsAssociationID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_LearningCenterTimeSlotsAssociationID");
			<th class="col3" @(Convert.ToString(ViewData["HostingEntity"]) == "T_LearningCenter" && Convert.ToString(ViewData["AssociatedType"]) == "T_LearningCenterTimeSlotsAssociation"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_TimeSlots",getSortHtmlAttributes("T_LearningCenterTimeSlotsAssociationID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_TimeSlots');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_LearningCenterTimeSlotsAssociationID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_LearningCenterTimeSlotsAssociationID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_TimeSlots","T_StartTime") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_StartTime");
			<th class="col4">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_TimeSlots",getSortHtmlAttributes("T_StartTime", false, null, false),new {  @onclick = "SortLinkClick(event,'T_TimeSlots');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_StartTime")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_StartTime")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_TimeSlots","T_EndTime") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EndTime");
			<th class="col5">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_TimeSlots",getSortHtmlAttributes("T_EndTime", false, null, false),new {  @onclick = "SortLinkClick(event,'T_TimeSlots');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EndTime")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EndTime")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
       </tr>
@{ bool isFirst = true; var oldKey = string.Empty; }
                                @foreach (var item in Model)
                                {
                                    if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || (string.IsNullOrEmpty(oldKey)))
                                        {
                                            isFirst = false;
											var groupCnt = Model.Where(grp => grp.m_DisplayValue == groupKey).Count();
                                            string groupString = string.Empty;
                                            if (groupCnt > 1)
                                            {
                                                groupString = "(" + groupCnt + " Records)";
                                            }
                                            else
                                            {
                                                groupString = "(" + groupCnt + " Record)";
                                            }
                                            <tr>
                                                <td colspan="6" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                                            </tr>
                                        }
                                    }
      <tr  ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "T_TimeSlots", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
	
	 <td>
			 <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
	</td>
	
		   <td>
	   <div style="width:60px; margin-top:-2px;">
		<div class="btn-group" style="position:absolute;">
                                                <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                    Action
                                                    <span class="caret">    </span>
                                                </button>
			<ul class="dropdown-menu pull-left">
				<li>
                    <a href="@Url.Action("Details", "T_TimeSlots", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
								@if (User.CanEdit("T_TimeSlots"))
					{
				 <li>
					
						<a   id='aBtnQuickEditT_TimeSlots_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Time Slots','dvPopup','" + Url.Action("EditQuick", "T_TimeSlots", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")"> <i class="fa fa-pencil"></i> Quick Edit</a>
					
				</li>
				}
				@if (User.CanEdit("T_TimeSlots"))
                {
				<li>
                        <a href="@Url.Action("Edit","T_TimeSlots", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    
                </li>             
				}
			@if (User.CanDelete("T_TimeSlots"))
                 {
				 <li class="divider" style="clear:both"></li>
				<li>
                    <a href="@Url.Action("Delete", "T_TimeSlots", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="glyphicon glyphicon-remove-sign" style="color: #E7574B;"></i> Delete</a>
                </li>
				}
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu">
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Session"))
				{
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Session", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_SessionTimeSlotAssociaton", 
							HostingEntityName = "T_TimeSlots",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Session
						</a>
					</li>
				}
							@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_SessionEvents"))
				{
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_SessionEvents", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_SessionEventsTimeSlots", 
							HostingEntityName = "T_TimeSlots",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Session
						</a>
					</li>
				}
			</ul>
</li>
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu">
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-zoom small"></i> Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "T_Session", new {sourceEntity="T_TimeSlots",id=item.Id}, null)">Session</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_SessionEvents", new {sourceEntity="T_TimeSlots",id=item.Id}, null)">Session Events</a>
</li>
</ul>
</li>
			</ul>
		</div>
		</div>
	</td>
	@if(User.CanView("T_TimeSlots","T_SlotNo"))
{
		<td onclick="OpenQuickEdit('T_TimeSlots','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.T_SlotNo)
        </td>
}
@if(User.CanView("T_TimeSlots","T_LearningCenterTimeSlotsAssociationID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_LearningCenter" && Convert.ToString(ViewData["AssociatedType"]) == "T_LearningCenterTimeSlotsAssociation"?"hidden":"") onclick="OpenQuickEdit('T_TimeSlots','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.t_learningcentertimeslotsassociation.DisplayValue)
			        </td>
}
		@if(User.CanView("T_TimeSlots","T_StartTime"))
			{
			<td onclick="OpenQuickEdit('T_TimeSlots','@item.Id',event);" id=@Html.Raw("'timeT_StartTime" + item.Id + "'")>
			</td>
			 @Html.Raw("<script> $(function () {$('timeT_StartTime" + item.Id + "').datetimepickerIndex({divid:'timeT_StartTime" + item.Id + "',format: 'hh:mm',val:'" + String.Format("{0:HH:mm}",item.T_StartTime) + "'})});</script>")        
			}
  		@if(User.CanView("T_TimeSlots","T_EndTime"))
			{
			<td onclick="OpenQuickEdit('T_TimeSlots','@item.Id',event);" id=@Html.Raw("'timeT_EndTime" + item.Id + "'")>
			</td>
			 @Html.Raw("<script> $(function () {$('timeT_EndTime" + item.Id + "').datetimepickerIndex({divid:'timeT_EndTime" + item.Id + "',format: 'hh:mm',val:'" + String.Format("{0:HH:mm}",item.T_EndTime) + "'})});</script>")        
			}
  
                                </tr>
                            }
                    </table>
                </div>
				 <ul id="Mob_List" class="list-group">
                    @foreach (var item in Model)
                    {
                        <li class="list-group-item">
@if(User.CanView("T_TimeSlots","T_SlotNo"))
{
		<p><span class="text-primary"> SlotNo </span> : <span>
            @Html.DisplayFor(modelItem => item.T_SlotNo)
         </span> </p>	
		 }
@if(User.CanView("T_TimeSlots","T_LearningCenterTimeSlotsAssociationID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_LearningCenter" && Convert.ToString(ViewData["AssociatedType"]) == "T_LearningCenterTimeSlotsAssociation"?"hidden":"")>
		<span class="text-primary"> Learning CenterTime SlotsAssociation </span> : <span>
		            @Html.DisplayFor(modelItem => item.t_learningcentertimeslotsassociation.DisplayValue)
			         </span> </p>
		 }
@if(User.CanView("T_TimeSlots","T_StartTime"))
{
		<p><span class="text-primary"> Start Time </span> : <span>
            @Html.DisplayFor(modelItem => item.T_StartTime)
         </span> </p>	
		 }
@if(User.CanView("T_TimeSlots","T_EndTime"))
{
		<p><span class="text-primary"> End Time </span> : <span>
            @Html.DisplayFor(modelItem => item.T_EndTime)
         </span> </p>	
		 }
<span class="label label-primary text-linkwhite"> 
@Html.ActionLink("View", "Details","T_TimeSlots", new { id = item.Id },null)
</span>
<span class="label label-warning text-linkwhite"> 
@if (User.CanEdit("T_TimeSlots"))
				 {
					@Html.ActionLink("Edit", "Edit","T_TimeSlots", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)  
				 }
				 </span>
				<span class="label label-danger text-linkwhite"> 
				@if (User.CanDelete("T_TimeSlots"))
				 {
					@Html.ActionLink("Delete", "Delete", "T_TimeSlots", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)    
				 }
				 </span>
				   </li>
                    }
                </ul>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_TimeSlots", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_TimeSlots",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_TimeSlots','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_TimeSlots",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_TimeSlots"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div> 
 </div>
    <div class="modal fade" id="ShowGraphT_TimeSlots" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_TimeSlotsLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:80%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphT_TimeSlotsLabel">Dashboard Time Slots</h4>
                </div>
				 <div  class="modal-body" >
						<div id="dvShowGraphT_TimeSlots" data-url="@Url.Action("ShowGraph", "T_TimeSlots", new { type = "all" })">
						</div>
						<div style="clear:both"></div>
                </div>
                
            </div>
        </div>
    </div>
</div>

