@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Address>
@using PagedList.Mvc;
@{
	
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Address");
 var OneToOnedb = new ApplicationContext(User);
}

<div id="T_Address">
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_Address')
			PaginationClick(e, 'T_Address','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_Address").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_T_Address").hide();
	        }
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'T_Address');
        }
	    $("#SearchStringT_Address").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_AddressSearch").bind("click", (function () {
                        }));
                $('#T_AddressSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_Address").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_Address').className == 'collapse') {
				 $('#lblT_Address').css('display', 'none');
            }
        })
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
 t_addresscountry = Request.QueryString["t_addresscountry"],
 t_addressstate = Request.QueryString["t_addressstate"],
 t_addresscity = Request.QueryString["t_addresscity"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = ViewBag.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = ViewBag.GroupByColumn,
				 FilterCondition = ViewBag.FilterCondition,
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_addresscountry = Request.QueryString["t_addresscountry"],
 t_addressstate = Request.QueryString["t_addressstate"],
 t_addresscity = Request.QueryString["t_addresscity"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-heading clearfix" style="margin:0px; padding:2px;">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_Address'>
				  @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Address"))
				  {
						
					<button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Add" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Address','dvPopup','" + Url.Action("CreateQuick", "T_Address", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
						<span class="fam-add"></span>
                    </button>
					<button class="btn btn-default tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Address", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');")>
						<span class="fam-world-add"></span> Add
					</button>
			}
			@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<button class="btn btn-default tip-top" data-placement="top" data-original-title="Associate Address with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Address','dvPopupBulkOperation','" + Url.Action("Index", "T_Address", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
					<span class="fam-chart-organisation"></span>
				</button>
			}
                </div>
				<div class="btn-group">

				@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Address"))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <button type="button" class="btn btn-default btn-default tip-top" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_Address") + "');")>
                        <span class="fam-page-excel"></span>               
                 </button>
				}
			}
				 <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_Address",getSortHtmlAttributes(null, false, null, true), null) + "');")>
				    <span class="fam-page-white-put"></span>
                </div>
		 </div>
		<div class="btn-group">
               @if (ViewData["HostingEntity"] == null)
			   {
                        <button class="btn btn-default tip-top" data-placement="top" data-original-title="Show Graph" style="padding:3px 5px;" data-toggle="modal" data-target="#ShowGraphT_Address" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_Address');")>
                            <span class="fam-chart-bar"></span>
                        </button>
				}
             <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideT_Address" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("showhideColumns(event,'T_Address');")>
                        <span class="fam-table-row-delete"></span>
                    </button>
	@if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
	{
		<div class="btn-group">
		<a class="btn btn-default btn-default dropdown-toggle tip-top" data-original-title="Filter-Groupby" style="padding:3px 5px;" data-toggle="dropdown" href="#">
		<span class="glyphicon glyphicon-filter"></span>
		</a>
		<ul class="dropdown-menu" role="menu">
            <li>
                <a id="fltT_Country" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Country');EntityFilter('T_Address','" + Url.Action("GetAllValueForFilter", "T_Country") + "','" + Html.Raw(Url.Action("Index", "T_Address", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Country", AssociatedType = "T_AddressCountry", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Address Country</span>
                </a>
            </li>
            <li>
                <a id="fltT_State" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_State');EntityFilter('T_Address','" + Url.Action("GetAllValueForFilter", "T_State") + "','" + Html.Raw(Url.Action("Index", "T_Address", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_State", AssociatedType = "T_AddressState", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Address State</span>
                </a>
            </li>
            <li>
                <a id="fltT_City" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_City');EntityFilter('T_Address','" + Url.Action("GetAllValueForFilter", "T_City") + "','" + Html.Raw(Url.Action("Index", "T_Address", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_City", AssociatedType = "T_AddressCity", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Address City</span>
                </a>
            </li>
     <li>@Html.ActionLink("Clear", "Index", new { viewtype = Convert.ToString(ViewBag.TemplatesName) }, new { onclick = "ClearFilterCookies();", @class = "label label-primary pull-left filterLabel", @Style = "margin-left:20px;color: white" })</li>
		</ul>
		</div>
	}
                </div>
 <div class="btn-group">
    <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Bulk Actions" style="padding:3px 5px;" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	
	@if (User.Identity.IsAuthenticated && User != null && User.CanEdit("T_Address")&&  User.CanUseVerb("BulkUpdate","T_Address",User))
	{
	<li>
		<a data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Address','dvPopup','" + Url.Action("BulkUpdate", "T_Address", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">Update</a>
	</li>
	
	}
	
 
	 @if (User.Identity.IsAuthenticated && User != null && User.CanDelete("T_Address") && User.CanUseVerb("BulkDelete","T_Address",User))
     {
	 <li>
		<a style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_Address','Bulk Delete','@Url.Action("DeleteBulk", "T_Address")');">Delete</a>
	 </li>
	
	 }
                        </ul>
                    </div>
					 <div class="btn-group">
                        <a class="btn btn-default dropdown-toggle tip-top" data-original-title="View Grid As" style="padding:3px 5px;" data-toggle="dropdown">
                            <span class="fa fa fa-table"></span>
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px">
                            <li>
                                <a data-placement="top" style="cursor:pointer;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Address','" + Url.Action("Index", "T_Address", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Address','" + Url.Action("Index", "T_Address", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialList" }) + "')")">
                                    <span class="fa fa-list"></span> List
                                </a>
                            </li>
                        </ul>
                    </div>
					

				<div class="pull-right" style="width:250px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_Address", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_AddressSearch" onclick="SearchClick(event, 'T_Address', '@Html.Raw(Url.Action("Index", "T_Address", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
 @if (ViewData["HostingEntity"]==null)
	{ 
			 <a href="@(Url.Action("SetFSearch", "T_Address")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-page-find"></span></a>
	}
								<button id="T_AddressCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Address','@Html.Raw(Url.Action("Index", "T_Address", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="T_AddressSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Address','@Html.Raw(Url.Action("Index", "T_Address", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="panel-body" style="margin:0px; padding:8px;">
 @if (ViewData["HostingEntity"]==null)
	{ 
	if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_Address" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
						 <a href="@Url.Action("Index", "T_Address",new{viewtype = Convert.ToString(ViewBag.TemplatesName)})" style="margin-left:5px;float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
						  <a href="@(Url.Action("SetFSearch", "T_Address")+Request.Url.Query)" style="float:right" ><span class="glyphicon glyphicon-edit"></span> Modify</a>
            </div>
	}
}
	@Html.Partial("~/Views/T_Address/ShowHideColumns.cshtml") 
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>

	 <th class="col0" style="width:20px;">
		<input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
        @Html.Hidden("SelectedItems")
	</th>

					<th class="col1" style="width:70px;">Actions</th>
@if(User.CanView("T_Address","T_AddressLine1") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AddressLine1");
			<th class="col2">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Address",getSortHtmlAttributes("T_AddressLine1", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Address');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AddressLine1")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AddressLine1")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Address","T_AddressLine2") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AddressLine2");
			<th class="col3">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Address",getSortHtmlAttributes("T_AddressLine2", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Address');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AddressLine2")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AddressLine2")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Address","T_ZipCode") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_ZipCode");
			<th class="col4">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Address",getSortHtmlAttributes("T_ZipCode", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Address');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_ZipCode")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_ZipCode")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Address","T_AddressCountryID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AddressCountryID");
			<th class="col5" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Country" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressCountry"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Address",getSortHtmlAttributes("T_AddressCountryID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Address');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AddressCountryID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AddressCountryID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Address","T_AddressStateID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AddressStateID");
			<th class="col6" @(Convert.ToString(ViewData["HostingEntity"]) == "T_State" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressState"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Address",getSortHtmlAttributes("T_AddressStateID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Address');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AddressStateID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AddressStateID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Address","T_AddressCityID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AddressCityID");
			<th class="col7" @(Convert.ToString(ViewData["HostingEntity"]) == "T_City" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressCity"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Address",getSortHtmlAttributes("T_AddressCityID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Address');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AddressCityID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AddressCityID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
   		@if (ViewData["HostingEntity"] == null)
		{
			<th>Employee Address</th>
		}
    </tr>
@{ bool isFirst = true; var oldKey = string.Empty; }
                                @foreach (var item in Model)
                                {
                                    if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || (string.IsNullOrEmpty(oldKey)))
                                        {
                                            isFirst = false;
											var groupCnt = Model.Where(grp => grp.m_DisplayValue == groupKey).Count();
                                            string groupString = string.Empty;
                                            if (groupCnt > 1)
                                            {
                                                groupString = "(" + groupCnt + " Records)";
                                            }
                                            else
                                            {
                                                groupString = "(" + groupCnt + " Record)";
                                            }
                                            <tr>
                                                <td colspan="8" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                                            </tr>
                                        }
                                    }
 var t_employeeaddress = OneToOnedb.T_Employees.FirstOrDefault(p => p.T_EmployeeAddressID == item.Id);
     <tr  ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "T_Address", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
	
	 <td>
			 <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
	</td>
	
		   <td>
	   <div style="width:60px; margin-top:-2px;">
		<div class="btn-group" style="position:absolute;">
                                                <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                    Action
                                                    <span class="caret">    </span>
                                                </button>
			<ul class="dropdown-menu pull-left">
				<li>
                    <a href="@Url.Action("Details", "T_Address", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
								@if (User.CanEdit("T_Address"))
					{
				 <li>
					
						<a   id='aBtnQuickEditT_Address_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Address','dvPopup','" + Url.Action("EditQuick", "T_Address", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")"> <i class="fa fa-pencil"></i> Quick Edit</a>
					
				</li>
				}
				@if (User.CanEdit("T_Address"))
                {
				<li>
                        <a href="@Url.Action("Edit","T_Address", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    
                </li>             
				}
			@if (User.CanDelete("T_Address"))
                 {
				 <li class="divider" style="clear:both"></li>
				<li>
                    <a href="@Url.Action("Delete", "T_Address", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="glyphicon glyphicon-remove-sign" style="color: #E7574B;"></i> Delete</a>
                </li>
				}
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu">
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-zoom small"></i> Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "T_State", new {sourceEntity="T_Address",id=item.Id}, null)">State</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_City", new {sourceEntity="T_Address",id=item.Id}, null)">City</a>
</li>
</ul>
</li>
			</ul>
		</div>
		</div>
	</td>
	@if(User.CanView("T_Address","T_AddressLine1"))
{
		<td onclick="OpenQuickEdit('T_Address','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.T_AddressLine1)
        </td>
}
@if(User.CanView("T_Address","T_AddressLine2"))
{
		<td onclick="OpenQuickEdit('T_Address','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.T_AddressLine2)
        </td>
}
@if(User.CanView("T_Address","T_ZipCode"))
{
		<td onclick="OpenQuickEdit('T_Address','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.T_ZipCode)
        </td>
}
@if(User.CanView("T_Address","T_AddressCountryID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Country" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressCountry"?"hidden":"") onclick="OpenQuickEdit('T_Address','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.t_addresscountry.DisplayValue)
			        </td>
}
@if(User.CanView("T_Address","T_AddressStateID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_State" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressState"?"hidden":"") onclick="OpenQuickEdit('T_Address','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.t_addressstate.DisplayValue)
			        </td>
}
@if(User.CanView("T_Address","T_AddressCityID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_City" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressCity"?"hidden":"") onclick="OpenQuickEdit('T_Address','@item.Id',event);">
            @Html.DisplayFor(modelItem => item.t_addresscity.DisplayValue)
			        </td>
}

		@if (ViewData["HostingEntity"] == null)
		{
		 <td>
			@if (t_employeeaddress != null)
			{
				@Html.ActionLink(t_employeeaddress.DisplayValue, "Details", "T_Employee", new { id = t_employeeaddress.Id }, null)
			}
		</td>
		}
                                </tr>
                            }
                    </table>
                </div>
				 <ul id="Mob_List" class="list-group">
                    @foreach (var item in Model)
                    {
                        <li class="list-group-item">
@if(User.CanView("T_Address","T_AddressLine1"))
{
		<p><span class="text-primary"> AddressLine1 </span> : <span>
            @Html.DisplayFor(modelItem => item.T_AddressLine1)
         </span> </p>	
		 }
@if(User.CanView("T_Address","T_AddressLine2"))
{
		<p><span class="text-primary"> AddressLine2 </span> : <span>
            @Html.DisplayFor(modelItem => item.T_AddressLine2)
         </span> </p>	
		 }
@if(User.CanView("T_Address","T_ZipCode"))
{
		<p><span class="text-primary"> ZipCode </span> : <span>
            @Html.DisplayFor(modelItem => item.T_ZipCode)
         </span> </p>	
		 }
@if(User.CanView("T_Address","T_AddressCountryID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Country" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressCountry"?"hidden":"")>
		<span class="text-primary"> Address Country </span> : <span>
		            @Html.DisplayFor(modelItem => item.t_addresscountry.DisplayValue)
			         </span> </p>
		 }
@if(User.CanView("T_Address","T_AddressStateID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_State" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressState"?"hidden":"")>
		<span class="text-primary"> Address State </span> : <span>
		            @Html.DisplayFor(modelItem => item.t_addressstate.DisplayValue)
			         </span> </p>
		 }
@if(User.CanView("T_Address","T_AddressCityID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_City" && Convert.ToString(ViewData["AssociatedType"]) == "T_AddressCity"?"hidden":"")>
		<span class="text-primary"> Address City </span> : <span>
		            @Html.DisplayFor(modelItem => item.t_addresscity.DisplayValue)
			         </span> </p>
		 }
<span class="label label-primary text-linkwhite"> 
@Html.ActionLink("View", "Details","T_Address", new { id = item.Id },null)
</span>
<span class="label label-warning text-linkwhite"> 
@if (User.CanEdit("T_Address"))
				 {
					@Html.ActionLink("Edit", "Edit","T_Address", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)  
				 }
				 </span>
				<span class="label label-danger text-linkwhite"> 
				@if (User.CanDelete("T_Address"))
				 {
					@Html.ActionLink("Delete", "Delete", "T_Address", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)    
				 }
				 </span>
				   </li>
                    }
                </ul>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Address", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_Address",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_Address','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Address",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_Address"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div> 
 </div>
    <div class="modal fade" id="ShowGraphT_Address" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_AddressLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:80%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphT_AddressLabel">Dashboard Address</h4>
                </div>
				 <div  class="modal-body" >
						<div id="dvShowGraphT_Address" data-url="@Url.Action("ShowGraph", "T_Address", new { type = "all" })">
						</div>
						<div style="clear:both"></div>
                </div>
                
            </div>
        </div>
    </div>
</div>

