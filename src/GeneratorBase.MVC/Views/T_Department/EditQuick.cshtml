@model GeneratorBase.MVC.Models.T_Department
@using PagedList;
@{
    ViewBag.Title = "Edit Department";
	var EditPermission = User.CanEditItem("T_Department", Model, User);
	var DeletePermission = User.CanDeleteItem("T_Department", Model, User);
	Layout = null;
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("T_Department", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				$('#' + hostingEntityName + 'ID').trigger("change");				
            }
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_DepartmentIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_DepartmentIsHiddenRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<div class="row">
    <div class="col-lg-12">
        
<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
      <h2 class="text-primary">
	  <span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
	   </h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
@using (Html.BeginForm("EditQuick","T_Department",new {UrlReferrer =Convert.ToString(ViewData["T_DepartmentParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
	 <div class="row">
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						    @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
						<div class="row">
@if(User.CanView("T_Department","T_Name"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Name)  <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Name,  getHtmlAttributes("T_Name"))
									@Html.ValidationMessageFor(model => model.T_Name)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Name, new { @class = "form-control" })}
@if(User.CanView("T_Department","T_Description"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Description">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Description) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.T_Description, getHtmlAttributes("T_Description"))
									@Html.ValidationMessageFor(model => model.T_Description)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Description, new { @class = "form-control" })}
@if(User.CanView("T_Department","T_Code"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Code">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Code)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Code,  getHtmlAttributes("T_Code"))
									@Html.ValidationMessageFor(model => model.T_Code)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Code, new { @class = "form-control" })}
       </div>


	            </div>
        </div>
	</div>
</div>
		 @Html.AntiForgeryToken();
		 <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
		 if (EditPermission)
         {
		 			    <input type="submit" name="command" value="Save" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,true,'T_Department','@ViewData["AssociatedType"]');" />
				<input type="hidden" name="hdncommand" value="" />
  		 }	
}

@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/Common3/chosen.jquery.js" type="text/javascript"></script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
</script>
@{
var busineesrule = User.businessrules.Where(p => p.EntityName == "T_Department").ToList();
if ((busineesrule != null && busineesrule.Count > 0))
{
    <script>
    $(document).ready(function () {
        $.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetLockBusinessRules", "T_Department")",
            data: $("form").serialize(),
        success: function (data) {
            if (data.length > 0) {
                $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
        }
    });
	$.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetReadOnlyProperties", "T_Department")",
            data: $("form").serialize(),
            success: function (data) {
                for (var key in data) {
                    $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
					$("input[type='radio'][name='" + key + "']").attr('disabled', 'disabled').attr('readonly', 'readonly');
					$('form').append('<input type="hidden" name="' + key + '" id="' + key + '" value="' + $('#' + key).val() + '" />');
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        });
    });
</script>
<script>
    $("form").submit(function () {
            var flag = true;
      
            $.ajax({
                async: false,
                type: "GET",
                url: "@Url.Action("GetMandatoryProperties", "T_Department")",
                data: $(this).serialize(),
                 success: function (data) {
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        document.getElementById('ErrMsg').innerHTML = "";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0)
                            {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            });
			 if (flag)
                    $("form").find(':input').removeAttr('disabled');
            return flag;
    });
</script>
}
 else
    {
           
    }
}


