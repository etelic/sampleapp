@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Department>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"]!=null && Request.QueryString["TabToken"]!=null)
	{
		BackUrl =  Request.UrlReferrer;
	}
}
<div id="T_Department">
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_Department')
			PaginationClick(e, 'T_Department','@User.JavaScriptEncodedName')
        })
	    $("#SearchStringT_Department").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_DepartmentSearch").bind("click", (function () {
                        }));
                $('#T_DepartmentSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_Department").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_Department').className == 'collapse') {
				 $('#lblT_Department').css('display', 'none');
            }
        })
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
				search=Request.QueryString["search"],
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
		search=Request.QueryString["search"],
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_Department'>
				  @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Department"))
				  {
						
					<button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Add" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Department','dvPopup','" + Url.Action("CreateQuick", "T_Department", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now }) + "')")">
						<span class="fam-add"></span>
                    </button>
					<button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Department", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
						<span class="fam-world-add"></span> Add
					</button>
			}
			@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<button class="btn btn-default tip-top" data-placement="top" data-original-title="Associate Department with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Department','dvPopupBulkOperation','" + Url.Action("Index", "T_Department", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">
					<span class="fam-chart-organisation"></span>
				</button>
			}
                </div>
				<div class="btn-group">
			@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Department"))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <button type="button" class="btn btn-default btn-default tip-top" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_Department") + "');")>
                        <span class="fam-page-excel"></span>               
                 </button>
				}
			}
				 <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_Department",getSortHtmlAttributes(null, false, null, true), null) + "');")>
				    <span class="fam-page-white-put"></span>
                </div>
		 </div>
		<div class="btn-group">
             <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideT_Department" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("showhideColumns(event,'T_Department');")>
                        <span class="fam-table-row-delete"></span>
                    </button>
                </div>
 <div class="btn-group">
    <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Bulk Actions" style="padding:3px 5px;" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	<li>
	@if (User.Identity.IsAuthenticated && User != null &&  !User.CanUseVerb("BulkUpdate","T_Department"))
	{
		<a data-placement="top" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Department','dvPopup','" + Url.Action("BulkUpdate", "T_Department", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">Update</a>
	}
	</li>
 <li>
	 @if (User.Identity.IsAuthenticated && User != null && !User.CanUseVerb("BulkDelete","T_Department"))
     {
		<a onclick="PerformBulkOperation(this,'T_Department','Bulk Delete','@Url.Action("DeleteBulk", "T_Department")');">Delete</a>
	 } </li>
                        </ul>
                    </div>
				<div class="pull-right" style="width:250px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_Department", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_DepartmentSearch" onclick="SearchClick(event, 'T_Department', '@Html.Raw(Url.Action("Index", "T_Department", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
								<button id="T_DepartmentCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Department','@Html.Raw(Url.Action("Index", "T_Department", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="T_DepartmentSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Department','@Html.Raw(Url.Action("Index", "T_Department", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="panel-body" style="margin:0px; padding:8px;">
	@Html.Partial("~/Views/T_Department/ShowHideColumns.cshtml") 
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>
	 <th class="col0" style="width:20px;">
		<input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
        @Html.Hidden("SelectedItems")
	</th>
					<th class="col1" style="width:70px;">Actions</th>
@if(User.CanView("T_Department","T_Name") )
{	
			<th class="col2">@Html.ActionLink("Name", ActionNameUrl, "T_Department",getSortHtmlAttributes("T_Name", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Department');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Name")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Name")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Department","T_Description") )
{	
			<th class="col3">@Html.ActionLink("Description", ActionNameUrl, "T_Department",getSortHtmlAttributes("T_Description", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Department');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Description")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Description")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Department","T_Code") )
{	
			<th class="col4">@Html.ActionLink("Code", ActionNameUrl, "T_Department",getSortHtmlAttributes("T_Code", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Department');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Code")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Code")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
       </tr>
@foreach (var item in Model) {
      <tr ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "T_Department", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
	 <td>
			 <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
	</td>
		   <td>
	   <div style="width:60px; margin-top:-2px;">
		<div class="btn-group" style="position:absolute;">
                                                <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                    Action
                                                    <span class="caret">    </span>
                                                </button>
			<ul class="dropdown-menu pull-left">
				<li>
                    <a href="@Url.Action("Details", "T_Department", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
				 <li>
					@if (User.CanEditItem("T_Department", item, User))
					{
						<a data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Department','dvPopup','" + Url.Action("EditQuick", "T_Department", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now
																			}) + "')")"> <i class="glyphicon glyphicon-edit"></i> Quick Edit</a>
					}
				</li>
				<li>
                    @if (User.CanEditItem("T_Department", item, User))
                    {
                        <a href="@Url.Action("Edit","T_Department", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (User.CanDeleteItem("T_Department", item, User))
                    {
                        <a href="@Url.Action("Delete", "T_Department", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu">
	<a tabindex="-1" href="#" style="margin-bottom:10px;">Add Association</a>
    <ul class="dropdown-menu pull-left">
				@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Student"))
				{
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Student", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_DepartmentCode", 
							HostingEntityName = "T_Department",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Students
						</a>
					</li>
				}
			</ul>
</li>
			</ul>
		</div>
		</div>
	</td>
	@if(User.CanView("T_Department","T_Name"))
{
		<td>
            @Html.DisplayFor(modelItem => item.T_Name)
        </td>
}
@if(User.CanView("T_Department","T_Description"))
{
		<td>
            @Html.DisplayFor(modelItem => item.T_Description)
        </td>
}
@if(User.CanView("T_Department","T_Code"))
{
		<td>
            @Html.DisplayFor(modelItem => item.T_Code)
        </td>
}
                                </tr>
                            }
                    </table>
                </div>
				 <ul id="Mob_List" class="list-group">
                    @foreach (var item in Model)
                    {
                        <li class="list-group-item">
@if(User.CanView("T_Department","T_Name"))
{
		<p><span class="text-primary"> Name </span> : <span>
            @Html.DisplayFor(modelItem => item.T_Name)
         </span> </p>	
		 }
@if(User.CanView("T_Department","T_Description"))
{
		<p><span class="text-primary"> Description </span> : <span>
            @Html.DisplayFor(modelItem => item.T_Description)
         </span> </p>	
		 }
@if(User.CanView("T_Department","T_Code"))
{
		<p><span class="text-primary"> Code </span> : <span>
            @Html.DisplayFor(modelItem => item.T_Code)
         </span> </p>	
		 }
<span class="label label-primary text-linkwhite"> 
@Html.ActionLink("View", "Details","T_Department", new { id = item.Id },null)
</span>
<span class="label label-warning text-linkwhite"> 
@if (User.CanEditItem("T_Department", item, User))
				 {
					@Html.ActionLink("Edit", "Edit","T_Department", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)  
				 }
				 </span>
				<span class="label label-danger text-linkwhite"> 
				@if (User.CanDeleteItem("T_Department", item, User))
				 {
					@Html.ActionLink("Delete", "Delete", "T_Department", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)    
				 }
				 </span>
				   </li>
                    }
                </ul>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Department", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_Department",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_Department','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Department",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div> 
 </div>
</div>
