@model GeneratorBase.MVC.Models.T_StudentPerformance
@using PagedList;
@{
    ViewBag.Title = "Edit StudentPerformance";
	var EditPermission = User.CanEditItem("T_StudentPerformance", Model, User);
	var DeletePermission = User.CanDeleteItem("T_StudentPerformance", Model, User);
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_TotalMarks")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_StudentPerformance", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				 $('#' + hostingEntityName + 'ID').trigger("change");
            }
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_StudentPerformanceIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_StudentPerformanceIsHiddenRule);
    }
}
<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title">
            <i class="glyphicon glyphicon-edit text-primary"></i> StudentPerformance  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>
        </h1>
<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
      <h2 class="text-primary">
	  <span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
	   <div class="btn-group pull-right fixactionbut">
            <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default pull-right">
                Action
                <span class="caret">    </span>
            </button>
			<ul class="dropdown-menu pull-left">
				<li>
                    <a href="@Url.Action("Details", "T_StudentPerformance", new { id = Model.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
				<li>
                    @if (User.Identity.IsAuthenticated && User != null && User.CanEdit("T_StudentPerformance"))
                    {
                        <a href="@Url.Action("Edit","T_StudentPerformance", new { id = Model.Id,  UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (User.Identity.IsAuthenticated && User != null && User.CanDelete("T_StudentPerformance"))
                    {
                        <a href="@Url.Action("Delete", "T_StudentPerformance", new { id = Model.Id, UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
			</ul>
		</div>
	  </h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
 <div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" data-toggle="tab">Details</a></li>
    </ul>
		<div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
@using (Html.BeginForm("Edit","T_StudentPerformance",new {UrlReferrer =Convert.ToString(ViewData["T_StudentPerformanceParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						<div class="row">
				@if(User.CanView("T_StudentPerformance","T_StudentCodeID"))
				{
                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_StudentCodeID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_StudentCodeID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_StudentPerformance", "T_StudentCodeID"))
		{
			@Html.DropDownList("T_StudentCodeID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Student", @dataurl = Url.Action("GetAllValue", "T_Student",new { caller = "T_StudentCodeID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_StudentCodeID, new { @class = "form-control" })
			@Html.DropDownList("T_StudentCodeID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Student", @dataurl = Url.Action("GetAllValue", "T_Student",new { caller = "T_StudentCodeID" }) })
		}
                                @Html.ValidationMessageFor(model => model.T_StudentCodeID)
								 @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Student"))
                                    {
                                <div class="input-group-btn">
                                 <a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Student','dvPopup','" + Url.Action("CreateQuick", "T_Student", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
										<span class="glyphicon glyphicon-plus-sign"></span>
                                    </a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.T_StudentCodeID, new { @class = "form-control" })}
@if(User.CanView("T_StudentPerformance","T_Mark1"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Mark1">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Mark1)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Mark1,  getHtmlAttributes("T_Mark1"))
									@Html.ValidationMessageFor(model => model.T_Mark1)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Mark1, new { @class = "form-control" })}
@if(User.CanView("T_StudentPerformance","T_Mark2"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Mark2">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Mark2)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Mark2,  getHtmlAttributes("T_Mark2"))
									@Html.ValidationMessageFor(model => model.T_Mark2)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Mark2, new { @class = "form-control" })}
@if(User.CanView("T_StudentPerformance","T_TotalMarks"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_TotalMarks">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_TotalMarks)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_TotalMarks,  getHtmlAttributes("T_TotalMarks"))
									@Html.ValidationMessageFor(model => model.T_TotalMarks)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_TotalMarks, new { @class = "form-control" })}
@if(User.CanView("T_StudentPerformance","T_Grade"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Grade">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Grade) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.T_Grade, getHtmlAttributes("T_Grade"))
									@Html.ValidationMessageFor(model => model.T_Grade)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Grade, new { @class = "form-control" })}
@if(User.CanView("T_StudentPerformance","T_Remarks"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Remarks">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Remarks) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.T_Remarks, getHtmlAttributes("T_Remarks"))
									@Html.ValidationMessageFor(model => model.T_Remarks)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Remarks, new { @class = "form-control" })}
       </div>
	            </div>
        </div>
		</div>
		 @Html.AntiForgeryToken();
		 @Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_StudentPerformanceParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" })
		 if (EditPermission)
         {
		  <input type="button" value="Get Calculation" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');" class="btn btn-default btn-sm" />
				<input type="submit" name="command" value="Save" class="btn btn-primary btn-sm" />
				<input type="submit" name="command" value="Save & Continue" class="btn btn-primary btn-sm" />
		}	
				<input type="hidden" name="hdncommand" value="" />
}
</div>
</div> <!-- /tab-content --><br />
<br/>
</div>
	<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
	</script>
@{
var busineesrule = User.businessrules.Where(p => p.EntityName == "T_StudentPerformance").ToList();
if ((busineesrule != null && busineesrule.Count > 0))
{
    <script>
    $(document).ready(function () {
        $.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetLockBusinessRules", "T_StudentPerformance")",
            data: $("form").serialize(),
        success: function (data) {
            if (data.length > 0) {
                $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
        }
    });
	$.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetReadOnlyProperties", "T_StudentPerformance")",
            data: $("form").serialize(),
            success: function (data) {
                for (var key in data) {
                    $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
					$("input[type='radio'][name='" + key + "']").attr('disabled', 'disabled').attr('readonly', 'readonly');
					$('form').append('<input type="hidden" name="' + key + '" id="' + key + '" value="' + $('#' + key).val() + '" />');
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        });
    });
</script>
<script>
    $("form").submit(function () {
            var flag = true;
      
            $.ajax({
                async: false,
                type: "GET",
                url: "@Url.Action("GetMandatoryProperties", "T_StudentPerformance")",
                data: $(this).serialize(),
                 success: function (data) {
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        document.getElementById('ErrMsg').innerHTML = "";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0)
                            {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            });
			 if (flag)
                    $("form").find(':input').removeAttr('disabled');
            return flag;
    });
</script>
}
 else
    {
           
    }
}


