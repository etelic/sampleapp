@model GeneratorBase.MVC.Models.T_Student
@using PagedList;
@{
    ViewBag.Title = "Edit Student";
	var EditPermission = User.CanEditItem("T_Student", Model, User);
	var DeletePermission = User.CanDeleteItem("T_Student", Model, User);
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("T_Student", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_StudentIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_StudentIsHiddenRule);
    }
}
@using (Html.BeginForm("EditWizard", "T_Student", new { UrlReferrer = Convert.ToString(ViewData["T_StudentParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
	@Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
	<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
	<div class="row">
        <br />
        <div id=wizard>
			<ol>
		<li>Type of student</li>
		<li>Others_Properties</li>
		</ol>
			<div style="background-color:transparent; padding:0px;">
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="panel panel-default AppForm">
                            <div class="panel-heading clearfix">
                                <i class="icon-calendar"></i>
                                <h3 class="panel-title">Type of student</h3>
                            </div>
                            <div class="panel-body">
@if(User.CanView("T_Student","T_Fulltime"))
{
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Fulltime">
							<div class="form-group">
                                <label class="col-sm-5 col-md-5 col-xs-12" >
                                    @Html.LabelFor(model => model.T_Fulltime) 
                                </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    @*@Html.CheckBoxFor(model => model.T_Fulltime)*@
									@Html.CheckBox("T_Fulltime", Model.T_Fulltime.HasValue ? Model.T_Fulltime : false)
                                    @Html.ValidationMessageFor(model => model.T_Fulltime)
                                </div>
								</div>
                            </div>
} else { @Html.HiddenFor(model => model.T_Fulltime, new { @class = "form-control" })}
@if(User.CanView("T_Student","T_Parttime"))
{
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Parttime">
							<div class="form-group">
                                <label class="col-sm-5 col-md-5 col-xs-12" >
                                    @Html.LabelFor(model => model.T_Parttime) 
                                </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    @*@Html.CheckBoxFor(model => model.T_Parttime)*@
									@Html.CheckBox("T_Parttime", Model.T_Parttime.HasValue ? Model.T_Parttime : false)
                                    @Html.ValidationMessageFor(model => model.T_Parttime)
                                </div>
								</div>
                            </div>
} else { @Html.HiddenFor(model => model.T_Parttime, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
					</div>
				</div>
			<div style="background-color:transparent; padding:0px;">
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="panel panel-default AppForm">
                            <div class="panel-heading clearfix">
                                <i class="icon-calendar"></i>
                                <h3 class="panel-title">Others_Properties</h3>
                            </div>
                            <div class="panel-body">
@if(User.CanView("T_Student","T_SchoolNameID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_SchoolNameID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_SchoolNameID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Student", "T_SchoolNameID"))
		{
			@Html.DropDownList("T_SchoolNameID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_School", @dataurl = Url.Action("GetAllValue", "T_School",new { caller = "T_SchoolNameID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_SchoolNameID, new { @class = "form-control" })
			@Html.DropDownList("T_SchoolNameID", null, "-- Select --", new {      @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_School", @dataurl = Url.Action("GetAllValue", "T_School",new { caller = "T_SchoolNameID" }) })
		}
                                @Html.ValidationMessageFor(model => model.T_SchoolNameID)
								 @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_School"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','School','dvPopup','" + Url.Action("CreateQuick", "T_School", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.T_SchoolNameID, new { @class = "form-control" })}
@if(User.CanView("T_Student","T_DepartmentCodeID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_DepartmentCodeID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_DepartmentCodeID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Student", "T_DepartmentCodeID"))
		{
			@Html.DropDownList("T_DepartmentCodeID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Department", @dataurl = Url.Action("GetAllValue", "T_Department",new { caller = "T_DepartmentCodeID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_DepartmentCodeID, new { @class = "form-control" })
			@Html.DropDownList("T_DepartmentCodeID", null, "-- Select --", new {      @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Department", @dataurl = Url.Action("GetAllValue", "T_Department",new { caller = "T_DepartmentCodeID" }) })
		}
                                @Html.ValidationMessageFor(model => model.T_DepartmentCodeID)
								 @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_Department"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Department','dvPopup','" + Url.Action("CreateQuick", "T_Department", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.T_DepartmentCodeID, new { @class = "form-control" })}
@if(User.CanView("T_Student","T_Name"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Name) <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								 
									@Html.TextBoxFor(model => model.T_Name,  getHtmlAttributes("T_Name"))
									@Html.ValidationMessageFor(model => model.T_Name)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Name, new { @class = "form-control" })}
@if(User.CanView("T_Student","T_Description"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Description">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Description) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.T_Description, getHtmlAttributes("T_Description"))
									@Html.ValidationMessageFor(model => model.T_Description)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Description, new { @class = "form-control" })}
@if(User.CanView("T_Student","T_Code"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Code">
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Code)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								 
									@Html.TextBoxFor(model => model.T_Code,  getHtmlAttributes("T_Code"))
									@Html.ValidationMessageFor(model => model.T_Code)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Code, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
					</div>
				</div>
</div>
   @Html.ActionLink("C", "Cancel", new { UrlReferrer = ViewData["T_StudentParentUrl"] }, new { @id = "cancel", @style = "display:none;" })
   <input type="hidden" name="hdncommand" value=""/>
    </div>
 <br />
}
	<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
	</script>
@{
var busineesrule = User.businessrules.Where(p => p.EntityName == "T_Student").ToList();
if ((busineesrule != null && busineesrule.Count > 0))
{
    <script>
    $(document).ready(function () {
        $.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetLockBusinessRules", "T_Student")",
            data: $("form").serialize(),
        success: function (data) {
            if (data.length > 0) {
                $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            alert(JSON.stringify(jqXHR));
            alert(errorThrown);
        }
    });
   	$.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetReadOnlyProperties", "T_Student")",
            data: $("form").serialize(),
            success: function (data) {
                for (var key in data) {
                    $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
					$("input[type='radio'][name='" + key + "']").attr('disabled', 'disabled').attr('readonly', 'readonly');
					$('form').append('<input type="hidden" name="' + key + '" id="' + key + '" value="' + $('#' + key).val() + '" />');
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        });
    });
</script>
<script>
    $("form").submit(function () {
            var flag = true;
            $.ajax({
                async: false,
                type: "GET",
                url: "@Url.Action("GetMandatoryProperties", "T_Student")",
                data: $(this).serialize(),
                 success: function (data) {
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        document.getElementById('ErrMsg').innerHTML = "";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0)
                            {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            });
			 if (flag)
                    $("form").find(':input').removeAttr('disabled');
            return flag;
    });
</script>
}
}


