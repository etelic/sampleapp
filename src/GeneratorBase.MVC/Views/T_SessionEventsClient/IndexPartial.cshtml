@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_SessionEventsClient>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"]!=null && Request.QueryString["TabToken"]!=null)
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EditPermission = true;
    var firstitem = Model.FirstOrDefault();
    if (firstitem != null)
    {
        EditPermission = User.CanEditItem("T_SessionEventsClient", firstitem, User);
    }
}
<div id="T_SessionEventsClient">
@if (ViewBag.ImportError != null)
{
         @Html.Partial("~/Views/Shared/ImportError.cshtml", "T_SessionEventsClient")
}
@if (ViewBag.ColumnMapping != null)
{
           @Html.Partial("~/Views/Shared/ImportColumnMapping.cshtml","T_SessionEventsClient")
}
@if (ViewBag.ConfirmImportData != null)
{
         @Html.Partial("~/Views/Shared/ImportData.cshtml", "T_SessionEventsClient")
}
@if (ViewBag.ColumnMapping == null && ViewBag.ImportError == null && ViewBag.ConfirmImportData == null)
{
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_SessionEventsClient')
			PaginationClick(e, 'T_SessionEventsClient','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_SessionEventsClient").addClass('in');
        }
	    $("#SearchStringT_SessionEventsClient").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_SessionEventsClientSearch").bind("click", (function () {
                        }));
                $('#T_SessionEventsClientSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_SessionEventsClient").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_SessionEventsClient').className == 'collapse') {
				 $('#lblT_SessionEventsClient').css('display', 'none');
            }
        })
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_client = Request.QueryString["t_client"],
 t_sessionevents = Request.QueryString["t_sessionevents"],
				search=Request.QueryString["search"],
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_client = Request.QueryString["t_client"],
 t_sessionevents = Request.QueryString["t_sessionevents"],
		search=Request.QueryString["search"],
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                 <div class="btn-group">
				  @if (User.Identity.IsAuthenticated && User != null && User.CanAdd("T_SessionEventsClient"))
				  {
						
				if (ViewData["HostingEntity"]!=null && EditPermission)
				{ 
					<button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Associate" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Session EventsClient','dvPopup','" + Url.Action("CreateQuick", "T_SessionEventsClient", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now }) + "')")">
						<span class="fam-chart-organisation"></span>
                    </button>
				}
				if (ViewData["HostingEntity"]!=null && EditPermission)
				{ 
					<button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Full Associate" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_SessionEventsClient", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
						 <span class="fam-chart-organisation-add"></span>
					</button>
				}
			if (ViewData["HostingEntity"]==null)
				{ 
				  <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnImportExcelT_SessionEventsClient" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;" data-toggle="collapse" href="#ImportExcelT_SessionEventsClient">
                                <span class="fam-page-white-put"></span>
                            </button>
				}
				}
				 <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_SessionEventsClient",getSortHtmlAttributes(null, false, null, true), null) + "');")>
                    <span class="fam-page-excel"></span>
                </div>
                            <button class="btn btn-default tip-top" data-placement="top" data-original-title="Show Graph" style="padding:3px 5px;" data-toggle="modal" data-target="#ShowGraphT_SessionEventsClient" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_SessionEventsClient');")>
                                <span class="fam-chart-bar"></span>
                            </button>
             <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideT_SessionEventsClient" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("showhideColumns(event,'T_SessionEventsClient');")>
                        <span class="fam-table-row-delete"></span>
                    </button>
 @if (ViewData["HostingEntity"]==null)
	{ 
			 <a href="@(Url.Action("SetFSearch", "T_SessionEventsClient")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom-in"></span></a>
	}
	@if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
	{
		<div class="btn-group">
		<a class="btn btn-default btn-default dropdown-toggle tip-top" data-original-title="Filter-Groupby" style="padding:3px 5px;" data-toggle="dropdown" href="#">
		<span class="glyphicon glyphicon-filter"></span>
		</a>
		<ul class="dropdown-menu" role="menu">
            <li>
                <a id="fltT_Client" data-placement="top" onclick=@Html.Raw("EntityFilter('T_SessionEventsClient','" + Url.Action("GetAllValueForFilter", "T_Client") + "','" + Html.Raw(Url.Action("Index", "T_SessionEventsClient", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Client", AssociatedType = "T_Client", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.Name + "');")>
                    <span>Client</span>
                </a>
            </li>
            <li>
                <a id="fltT_SessionEvents" data-placement="top" onclick=@Html.Raw("EntityFilter('T_SessionEventsClient','" + Url.Action("GetAllValueForFilter", "T_SessionEvents") + "','" + Html.Raw(Url.Action("Index", "T_SessionEventsClient", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_SessionEvents", AssociatedType = "T_SessionEvents", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.Name + "');")>
                    <span>Session Events</span>
                </a>
            </li>
       <li><span class="label label-primary pull-left filterLabel" style="margin-left:20px;">@Html.ActionLink("Clear", "Index")</span></li>
		</ul>
		</div>
	}
                </div>
				<div class="pull-right" style="width:200px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_SessionEventsClient", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_SessionEventsClientSearch" onclick="SearchClick(event, 'T_SessionEventsClient', '@Html.Raw(Url.Action("Index", "T_SessionEventsClient", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))','@User.Name');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
								<button id="T_SessionEventsClientCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_SessionEventsClient','@Html.Raw(Url.Action("Index", "T_SessionEventsClient", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.Name')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="T_SessionEventsClientSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_SessionEventsClient','@Html.Raw(Url.Action("Index", "T_SessionEventsClient", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.Name')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="panel-body" style="margin:0px; padding:8px;">
 @if (ViewData["HostingEntity"]==null)
	{ 
	if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_SessionEventsClient" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
						 <a href="@Url.Action("Index", "T_SessionEventsClient")" style="float:right" ><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
            </div>
	}
}
	@Html.Partial("~/Views/T_SessionEventsClient/ShowHideColumns.cshtml") 
	@if (ViewData["HostingEntity"]==null)
	{ 	   
		<div id="ImportExcelT_SessionEventsClient" class="collapse">
            @using (Html.BeginForm("Upload", "T_SessionEventsClient", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                    @Html.Partial("~/Views/Shared/FileUpload.cshtml")
            }
        </div>   
	 }           
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>
					<th class="col1">Actions</th>
@if(User.CanView("T_SessionEventsClient","T_ClientID"))
{
			<th class="col2" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Client" && Convert.ToString(ViewData["AssociatedType"]) == "T_Client"?"hidden":"")>
				@Html.ActionLink("Client", ActionNameUrl, "T_SessionEventsClient",getSortHtmlAttributes("T_ClientID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_SessionEventsClient');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_ClientID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_ClientID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_SessionEventsClient","T_SessionEventsID"))
{
			<th class="col3" @(Convert.ToString(ViewData["HostingEntity"]) == "T_SessionEvents" && Convert.ToString(ViewData["AssociatedType"]) == "T_SessionEvents"?"hidden":"")>
				@Html.ActionLink("Session Events", ActionNameUrl, "T_SessionEventsClient",getSortHtmlAttributes("T_SessionEventsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_SessionEventsClient');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_SessionEventsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_SessionEventsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
    </tr>
@foreach (var item in Model) {
     <tr ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "T_SessionEventsClient", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
	   <td>
	   <div style="width:60px; margin-top:-2px;">
		<div class="btn-group" style="position:absolute;">
                                                <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                    Action
                                                    <span class="caret">    </span>
                                                </button>
			<ul class="dropdown-menu pull-left">
				@if (User.CanEdit("T_SessionEventsClient"))
				{
				 <li>
					
						<a   id='aBtnQuickEditT_SessionEventsClient_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Session EventsClient','dvPopup','" + Url.Action("EditQuick", "T_SessionEventsClient", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")"> <i class="fa fa-pencil"></i> Quick Edit</a>
					
				</li>
				}
				<li>
                    <a href="@Url.Action("Details", "T_SessionEventsClient", new { id = item.Id }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
                <li>
                    @if (User.Identity.IsAuthenticated && User != null && User.CanEdit("T_SessionEventsClient"))
                    {
                        <a href="@Url.Action("Edit","T_SessionEventsClient", new { id = item.Id,  UrlReferrer = BackUrl, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Associate/Disassociate</a>
                    }
                </li>
				<li>
                    @if (User.Identity.IsAuthenticated && User != null && User.CanDelete("T_SessionEventsClient"))
                    {
                        <a href="@Url.Action("Delete", "T_SessionEventsClient", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Disassociate</a>
                    }
                </li>
			</ul>
		</div>
		</div>
	</td>
	@if(User.CanView("T_SessionEventsClient","T_ClientID"))
{
		<td @(Convert.ToString(ViewData["HostingEntity"]) == "T_Client" && Convert.ToString(ViewData["AssociatedType"]) == "T_Client"?"hidden":"")>
		@if (item.t_client != null  && !string.IsNullOrEmpty(item.t_client.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_client.DisplayValue).ToString()), "Details", "T_Client", new { Id = Html.DisplayFor(modelItem => item.t_client.Id).ToString() },null)
}
		         </td>
}
@if(User.CanView("T_SessionEventsClient","T_SessionEventsID"))
{
		<td @(Convert.ToString(ViewData["HostingEntity"]) == "T_SessionEvents" && Convert.ToString(ViewData["AssociatedType"]) == "T_SessionEvents"?"hidden":"")>
		@if (item.t_sessionevents != null  && !string.IsNullOrEmpty(item.t_sessionevents.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_sessionevents.DisplayValue).ToString()), "Details", "T_SessionEvents", new { Id = Html.DisplayFor(modelItem => item.t_sessionevents.Id).ToString() },null)
}
		         </td>
}
                                </tr>
                            }
                    </table>
                </div>
				 <ul id="Mob_List" class="list-group">
                    @foreach (var item in Model)
                    {
                        <li class="list-group-item">
@if(User.CanView("T_SessionEventsClient","T_ClientID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Client" && Convert.ToString(ViewData["AssociatedType"]) == "T_Client"?"hidden":"")>
		<span class="text-primary"> Client </span> : <span>
		@if (item.t_client != null  && !string.IsNullOrEmpty(item.t_client.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_client.DisplayValue).ToString(), "Details", "T_Client", new { Id = Html.DisplayFor(modelItem => item.t_client.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_SessionEventsClient","T_SessionEventsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_SessionEvents" && Convert.ToString(ViewData["AssociatedType"]) == "T_SessionEvents"?"hidden":"")>
		<span class="text-primary"> Session Events </span> : <span>
		@if (item.t_sessionevents != null  && !string.IsNullOrEmpty(item.t_sessionevents.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_sessionevents.DisplayValue).ToString(), "Details", "T_SessionEvents", new { Id = Html.DisplayFor(modelItem => item.t_sessionevents.Id).ToString() },null)
}
		          </span> </p>
		 }
<span class="label label-primary text-linkwhite"> 
@Html.ActionLink("View", "Details","T_SessionEventsClient", new { id = item.Id },null)
</span>
<span class="label label-warning text-linkwhite"> 
@if (User.Identity.IsAuthenticated && User != null && User.CanEdit("T_SessionEventsClient"))
				 {
					@Html.ActionLink("Edit", "Edit","T_SessionEventsClient", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)  
				 }
				 </span>
				<span class="label label-danger text-linkwhite"> 
				@if (User.Identity.IsAuthenticated && User != null && User.CanDelete("T_SessionEventsClient"))
				 {
					@Html.ActionLink("Delete", "Delete", "T_SessionEventsClient", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)    
				 }
				 </span>
				   </li>
                    }
                </ul>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_SessionEventsClient", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_SessionEventsClient",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_SessionEventsClient','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_SessionEventsClient",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div> 
 </div>
    <div class="modal fade" id="ShowGraphT_SessionEventsClient" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_SessionEventsClientLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphT_SessionEventsClientLabel">Dashboard Session EventsClient</h4>
                </div>
                <div id="dvShowGraphT_SessionEventsClient" class="modal-body" data-url="@Url.Action("ShowGraph", "T_SessionEventsClient" , new { type = "all" })">
                </div>
            </div>
        </div>
    </div>
}
</div>
